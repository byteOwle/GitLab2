/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.4.2/userguide/building_java_projects.html
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter:5.8.1'

    // This dependency is used by the application.
    implementation 'com.google.guava:guava:30.1.1-jre'
}

application {
    // Define the main class for the application.
    mainClass = 'edu.odu.cs.Highway'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

task reports (dependsOn: ['javadoc', 'test']) {
    description 'Generate reports website for this project'
}

// task deployReports (type: Copy) { 
// }

def websiteRepo='git@github.com:byteOwle/GitLab2.git'

task clearPages(type: Delete) {
    delete 'build/gh-pages'
}

task clonePages(dependsOn: ['clearPages']) {                
    doLast {
        exec {
            workingDir = '.'
            commandLine = ['git', 'clone', websiteRepo, 'build/gh-pages']
        }
    }
}

task copyWebsite (dependsOn: ['reports', 'clonePages']) {   
    doLast {
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/reports')
        }
        ant.copy (todir: 'build/gh-pages') {
            fileset(dir: 'build/docs')
        }
    }
}

task deployReports (dependsOn: 'copyWebsite') {
    group = "Reporting"
    description  'Copies reports to the gh-pages branch in preparation for a future push to GitHub'
    doLast {
        def pagesDir = "$buildDir/gh-pages"
        exec {
            workingDir = 'build/gh-pages'                               
            commandLine = ['git', 'add', '.']
        }
        exec {
            workingDir = 'build/gh-pages'
            commandLine = ['git', 'commit', '-m', 'Copied new files into branch']   
        }
    }
}

test {
    ignoreFailures = true
}